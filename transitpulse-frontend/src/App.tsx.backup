import React, { useState, useEffect, useCallback } from 'react';
import { MapContainer, TileLayer, Marker, Popup } from 'react-leaflet';
import 'leaflet/dist/leaflet.css'; // Core Leaflet CSS
import 'leaflet-defaulticon-compatibility'; // Fix for default icons
import 'leaflet-defaulticon-compatibility/dist/leaflet-defaulticon-compatibility.css'; // CSS for the fix
import L from 'leaflet'; // Import Leaflet library itself

// Interface for KPI Summary
interface KPISummary {
    attendance_rate: number;
    absences_today: number;
    vehicles_on_road: string;
    coach_swaps: number;
    on_time_performance: number;
    canceled_trips: string;
    operator_cost: string;
    id: number;
    timestamp: string;
}

// Interface for Vehicle
interface Vehicle {
    id: number;
    vehicle_id: string;
    trip_id?: string;
    route_id?: string;
    latitude: number;
    longitude: number;
    bearing?: number;
    speed?: number;
    current_status?: number;
    timestamp: string;
    congestion_level?: number;
    occupancy_status?: number;
    stop_id?: string;
}

// Define the default icon properties globally
const DefaultIcon = L.icon({
  iconUrl: 'https://unpkg.com/leaflet@1.7.1/dist/images/marker-icon.png',
  iconRetinaUrl: 'https://unpkg.com/leaflet@1.7.1/dist/images/marker-icon-2x.png',
  shadowUrl: 'https://unpkg.com/leaflet@1.7.1/dist/images/marker-shadow.png',
  iconSize: [25, 41],
  iconAnchor: [12, 41],
  popupAnchor: [1, -34],
  shadowSize: [41, 41]
});

// Set the default icon for all Leaflet markers
L.Marker.prototype.options.icon = DefaultIcon;

// Custom icon for buses
const busIcon = L.icon({
    iconUrl: 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-red.png',
    shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.7/images/marker-shadow.png',
    iconSize: [25, 41],
    iconAnchor: [12, 41],
    popupAnchor: [1, -34],
    shadowSize: [41, 41]
});

// Fix for default marker icons in React Leaflet
delete (L.Icon.Default.prototype as any)._getIconUrl;
L.Icon.Default.mergeOptions({
  iconRetinaUrl: 'https://unpkg.com/leaflet@1.7.1/dist/images/marker-icon-2x.png',
  iconUrl: 'https://unpkg.com/leaflet@1.7.1/dist/images/marker-icon.png',
  shadowUrl: 'https://unpkg.com/leaflet@1.7.1/dist/images/marker-shadow.png',
});

interface Vehicle {
  id: number;
  vehicle_id: string;
  trip_id: string;
  route_id: string;
  latitude: number;
  longitude: number;
  bearing?: number;
  speed?: number;
  current_status?: number;
  timestamp: string;
}

function App() {
  const [kpiData, setKpiData] = useState<KPISummary | null>(null);
  const [vehicles, setVehicles] = useState<Vehicle[]>([]);
  const [loading, setLoading] = useState<boolean>(true);
  const [loadingVehicles, setLoadingVehicles] = useState<boolean>(true);
  const [error, setError] = useState<Error | null>(null);
  const [errorVehicles, setErrorVehicles] = useState<Error | null>(null);
  const [lastUpdated, setLastUpdated] = useState<Date | null>(null);

  const fetchData = useCallback(async () => {
    try {
      setLoading(true);
      setError(null);
      console.log('Fetching KPI data...');
      const data = await fetchKPISummary();
      setKpiData(data);
      setLastUpdated(new Date());
      console.log('KPI data fetched successfully:', data);
    } catch (err) {
      const error = err as Error;
      console.error('Failed to fetch KPI data:', error);
      setError(error);
    } finally {
      setLoading(false);
    }
  }, []);

  // Fetch vehicle data
  const fetchVehicles = useCallback(async () => {
    try {
      setLoadingVehicles(true);
      const response = await fetch('http://localhost:8000/api/v1/vehicles/live');
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      const data = await response.json();
      setVehicles(data);
      setErrorVehicles(null);
    } catch (err) {
      console.error('Error fetching vehicles:', err);
      setErrorVehicles(err as Error);
    } finally {
      setLoadingVehicles(false);
    }
  }, []);

  useEffect(() => {
    // Initial KPI data fetch
    fetchData();
    // Initial vehicles fetch
    fetchVehicles();

    // Set up polling
    const kpiInterval = setInterval(fetchData, 30000);
    const vehiclesInterval = setInterval(fetchVehicles, 10000);
    
    // Clean up intervals on component unmount
    return () => {
      clearInterval(kpiInterval);
      clearInterval(vehiclesInterval);
    };
  }, [fetchData, fetchVehicles]);

  const formatKpiValue = (key: string, value: any) => {
    if (key === 'attendance_rate' || key === 'on_time_performance') {
      return `${value}%`;
    }
    if (key === 'operator_cost') {
      return `${value}`;
    }
    return String(value).replace(/_/g, ' ').replace(/\b\w/g, char => char.toUpperCase());
  };

  const kpiCards = [
    { title: 'Attendance Rate', key: 'attendance_rate' as keyof KPISummary, icon: '‚úÖ', color: 'green' },
    { title: 'Absences Today', key: 'absences_today' as keyof KPISummary, icon: '‚ùå', color: 'red' },
    { title: 'Vehicles on Road', key: 'vehicles_on_road' as keyof KPISummary, icon: 'üöå', color: 'blue' },
    { title: 'Coach Swaps', key: 'coach_swaps' as keyof KPISummary, icon: 'üîÑ', color: 'orange' },
    { title: 'On-Time Performance', key: 'on_time_performance' as keyof KPISummary, icon: '‚è±Ô∏è', color: 'purple' },
    { title: 'Canceled Trips', key: 'canceled_trips' as keyof KPISummary, icon: 'üö´', color: 'red' },
    { title: 'Operator Cost', key: 'operator_cost' as keyof KPISummary, icon: 'üí∏', color: 'teal' },
  ];

  if (loading) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gray-100">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500 mx-auto"></div>
          <p className="mt-4 text-lg font-medium text-gray-700">Loading KPI data...</p>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-red-50 p-4">
        <div className="text-center">
          <div className="text-red-500 text-4xl mb-4">‚ö†Ô∏è</div>
          <h1 className="text-2xl font-bold text-red-700 mb-2">Error Loading Data</h1>
          <p className="text-red-600">{error.message}</p>
          <button 
            onClick={fetchData} 
            className="mt-4 px-4 py-2 bg-red-100 text-red-700 rounded-md hover:bg-red-200 transition-colors"
          >
            Retry
          </button>
        </div>
      </div>
    );
  }

  if (!kpiData) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gray-100">
        <div className="text-center">
          <p className="text-gray-700 text-lg">No KPI data available.</p>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-100 p-4">
      <header className="bg-white shadow rounded-lg p-6 mb-6">
        <h1 className="text-3xl font-bold text-gray-800">TransitPulse Dashboard</h1>
        <p className="text-gray-600">Real-time transit system monitoring</p>
        {lastUpdated && (
          <p className="text-sm text-gray-500 mt-2">
            Last updated: {lastUpdated.toLocaleTimeString()}
          </p>
        )}
      </header>

      <main>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6 mb-6">
          {kpiCards.map((card) => (
            <div
              key={String(card.key)}
              className="bg-white rounded-lg shadow p-6 hover:shadow-md transition-shadow"
            >
              <div className="flex items-center justify-between mb-2">
                <h2 className="text-lg font-medium text-gray-700">{card.title}</h2>
                <span className="text-2xl">{card.icon}</span>
              </div>
              <p className={`text-3xl font-bold text-${card.color}-600`}>
                {kpiData ? formatKpiValue(String(card.key), kpiData[card.key]) : 'N/A'}
              </p>
            </div>
          ))}
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
          <div className="bg-white rounded-lg shadow p-6 lg:col-span-2">
            <h2 className="text-xl font-semibold mb-4 text-gray-800">
              Live Vehicle Map {vehicles.length > 0 && `(${vehicles.length} active)`}
            </h2>
            <div className="rounded-lg overflow-hidden" style={{ height: '500px' }}>
              {loadingVehicles ? (
                <div className="h-full flex items-center justify-center bg-gray-50">
                  <div className="text-center">
                    <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500 mx-auto"></div>
                    <p className="mt-2 text-gray-600">Loading map data...</p>
                  </div>
                </div>
              ) : errorVehicles ? (
                <div className="h-full flex items-center justify-center bg-red-50 text-red-700 p-4">
                  <div>
                    <p>Error loading vehicle data:</p>
                    <p className="text-sm">{errorVehicles.message}</p>
                    <button 
                      onClick={fetchVehicles}
                      className="mt-2 px-4 py-1 bg-red-100 rounded hover:bg-red-200 text-sm"
                    >
                      Retry
                    </button>
                  </div>
                </div>
              ) : (
                <MapContainer 
                  center={[37.7749, -122.4194] as [number, number]} 
                  zoom={13} 
                  style={{ height: '100%', width: '100%' }}
                >
                  <TileLayer
                    url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png"
                    attribution='&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
                  />
                  {vehicles.map((vehicle) => (
                    <Marker 
                      key={`${vehicle.vehicle_id}-${vehicle.timestamp}`}
                      position={[vehicle.latitude, vehicle.longitude]}
                    >
                      <Popup>
                        <div className="space-y-1">
                          <p><strong>Vehicle ID:</strong> {vehicle.vehicle_id}</p>
                          <p><strong>Route:</strong> {vehicle.route_id || 'N/A'}</p>
                          <p><strong>Trip:</strong> {vehicle.trip_id || 'N/A'}</p>
                          <p><strong>Status:</strong> {vehicle.current_status || 'N/A'}</p>
                          <p className="text-xs text-gray-500">
                            Updated: {new Date(vehicle.timestamp).toLocaleTimeString()}
                          </p>
                        </div>
                      </Popup>
                    </Marker>
                  ))}
                </MapContainer>
              )}
            </div>
          </div>
          <div className="bg-white rounded-lg shadow p-6">
            <h2 className="text-xl font-semibold mb-4 text-gray-800">Recent Alerts</h2>
            <div className="space-y-2">
              <div className="p-3 bg-red-50 text-red-700 rounded-md">
                <p className="font-medium">Route 42 - 15 min delay</p>
                <p className="text-sm">Due to traffic congestion</p>
              </div>
              <div className="p-3 bg-yellow-50 text-yellow-700 rounded-md">
                <p className="font-medium">Coach #B234 - Maintenance required</p>
                <p className="text-sm">Check engine light on</p>
              </div>
              <div className="p-3 bg-blue-50 text-blue-700 rounded-md">
                <p className="font-medium">Schedule Update</p>
                <p className="text-sm">New timetable effective next week</p>
              </div>
            </div>
          </div>
        </div>
      </main>

      <footer className="mt-8 text-center text-gray-500 text-sm">
        <p>¬© {new Date().getFullYear()} TransitPulse. All rights reserved.</p>
      </footer>
    </div>
  );
}

export default App;
