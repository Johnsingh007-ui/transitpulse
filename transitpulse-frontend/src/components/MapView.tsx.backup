import { MapContainer, TileLayer, Marker, Popup, useMap, useMapEvents } from 'react-leaflet';
import 'leaflet/dist/leaflet.css';
import { useEffect, useMemo, useState, useRef } from 'react';
import L from 'leaflet';
import type { Vehicle } from '../types';

// Track previous positions for smooth transitions
const usePreviousPositions = (vehicles: Vehicle[]) => {
  const positionsRef = useRef<Record<string, [number, number]>>({});
  
  useEffect(() => {
    // Update positions when vehicles change
    const newPositions: Record<string, [number, number]> = {};
    vehicles.forEach(vehicle => {
      const key = `${vehicle.vehicle_id}-${vehicle.timestamp}`;
      newPositions[key] = [vehicle.latitude, vehicle.longitude];
    });
    positionsRef.current = newPositions;
  }, [vehicles]);
  
  return positionsRef.current;
};

// Create a custom bus icon with memoization to prevent unnecessary recreations
const createBusIcon = (bearing = 0, isMoving = false) => {
  return L.divIcon({
    html: `
      <div style="
        width: 24px;
        height: 24px;
        background: #1a56db;
        border-radius: 50% 50% 50% 0;
        position: relative;
        transform: rotate(${bearing}deg) scale(${isMoving ? 1.1 : 1});
        transform-origin: 50% 50%;
        transition: 
          transform 0.5s cubic-bezier(0.4, 0, 0.2, 1),
          box-shadow 0.3s ease;
        ${isMoving ? 'box-shadow: 0 0 10px rgba(26, 86, 219, 0.7);' : ''}
      ">
        <div style="
          position: absolute;
          width: 16px;
          height: 16px;
          background: white;
          border-radius: 50%;
          top: 4px;
          left: 4px;
          display: flex;
          align-items: center;
          justify-content: center;
          font-size: 10px;
          color: #1a56db;
          font-weight: bold;
          transition: transform 0.3s ease;
          transform: ${isMoving ? 'scale(1.1)' : 'scale(1)'};
        ">üöå</div>
      </div>
    `,
    className: `bus-marker ${isMoving ? 'bus-moving' : ''}`,
    iconSize: [24, 24],
    iconAnchor: [12, 24],
    popupAnchor: [0, -24]
  });
};

interface MapViewProps {
  vehicles: Vehicle[];
  center: [number, number];
  zoom: number;
  isLoading?: boolean;
  error?: Error | null;
}

// Custom marker component with smooth transitions
const VehicleMarker = ({ vehicle, previousPosition }: { vehicle: Vehicle, previousPosition?: [number, number] }) => {
  const [isMoving, setIsMoving] = useState(false);
  const markerRef = useRef<L.Marker>(null);
  const prevPositionRef = useRef<[number, number]>([vehicle.latitude, vehicle.longitude]);
  const moveTimeoutRef = useRef<NodeJS.Timeout>();

  // Handle marker movement animation
  useEffect(() => {
    const marker = markerRef.current;
    if (!marker) return;

    const newPos: [number, number] = [vehicle.latitude, vehicle.longitude];
    const oldPos: [number, number] = previousPosition || prevPositionRef.current;
    
    // Only animate if position changed significantly
    const distance = Math.sqrt(
      Math.pow(newPos[0] - oldPos[0], 2) + 
      Math.pow(newPos[1] - oldPos[1], 2)
    );

    if (distance > 0.00001) { // Threshold to detect actual movement
      // Set moving state
      setIsMoving(true);
      
      // Smooth transition to new position
      marker.setLatLng(newPos);
      
      // Reset moving state after animation
      if (moveTimeoutRef.current) {
        clearTimeout(moveTimeoutRef.current);
      }
      
      moveTimeoutRef.current = setTimeout(() => {
        setIsMoving(false);
      }, 1000); // Match this with CSS transition duration
      
      prevPositionRef.current = newPos;
    }

    return () => {
      if (moveTimeoutRef.current) {
        clearTimeout(moveTimeoutRef.current);
      }
    };
  }, [vehicle.latitude, vehicle.longitude, previousPosition]);

  return (
    <Marker 
      ref={markerRef}
      position={[vehicle.latitude, vehicle.longitude]}
      icon={createBusIcon(vehicle.bearing || 0, isMoving)}
      key={`${vehicle.vehicle_id}-${vehicle.timestamp}`}
    >
      <Popup>
        <div className="space-y-1 min-w-[200px]">
          <p className="font-semibold text-blue-600">Vehicle #{vehicle.vehicle_id}</p>
          <div className="grid grid-cols-2 gap-1 text-sm">
            <span className="text-gray-500">Route:</span>
            <span>{vehicle.route_id || 'N/A'}</span>
            
            <span className="text-gray-500">Trip:</span>
            <span>{vehicle.trip_id || 'N/A'}</span>
            
            <span className="text-gray-500">Status:</span>
            <span className="font-medium">
              {vehicle.current_status !== undefined ? 
                `Code ${vehicle.current_status}` : 'N/A'}
            </span>
            
            <span className="text-gray-500">Speed:</span>
            <span>{vehicle.speed !== null && vehicle.speed !== undefined ? `${Math.round(vehicle.speed)} km/h` : 'N/A'}</span>
          </div>
          <p className="text-xs text-gray-400 mt-1">
            Updated: {new Date(vehicle.timestamp).toLocaleTimeString()}
          </p>
        </div>
      </Popup>
    </Marker>
  );
};

function MapContent({ vehicles }: { vehicles: Vehicle[] }) {
  const map = useMap();
  const previousPositions = usePreviousPositions(vehicles);
  const [isMapReady, setIsMapReady] = useState(false);

  // Handle map initialization
  useMapEvents({
    load: () => {
      setIsMapReady(true);
      map.invalidateSize();
    },
    moveend: () => {
      // Ensure markers are properly positioned after map movement
      map.invalidateSize();
    }
  });

  // Update map view when vehicles change
  useEffect(() => {
    if (vehicles.length > 0 && isMapReady) {
      map.invalidateSize();
    }
  }, [vehicles, map, isMapReady]);

  // Memoize the markers to prevent unnecessary re-renders
  const markers = useMemo(() => {
    return vehicles.map((vehicle) => {
      const key = `${vehicle.vehicle_id}-${vehicle.timestamp}`;
      return (
        <VehicleMarker 
          key={key}
          vehicle={vehicle}
          previousPosition={previousPositions[key]}
        />
      );
    });
  }, [vehicles, previousPositions]);

  return (
    <>
      <TileLayer
        url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png"
        attribution='&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
      />
      {markers}
    </>
  );
}

const MapView = ({ vehicles, center, zoom, isLoading, error }: MapViewProps) => {
  if (error) {
    return (
      <div className="h-full flex items-center justify-center bg-red-50 p-4">
        <div className="text-center">
          <div className="text-red-500 text-4xl mb-2">‚ö†Ô∏è</div>
          <h3 className="text-lg font-medium text-red-800">Map Error</h3>
          <p className="text-red-600 text-sm">{error.message || 'Failed to load map data'}</p>
        </div>
      </div>
    );
  }

  if (isLoading) {
    return (
      <div className="h-full flex items-center justify-center bg-gray-50">
        <div className="text-center">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500 mx-auto"></div>
          <p className="mt-2 text-gray-600 text-sm">Loading map data...</p>
        </div>
      </div>
    );
  }

  return (
    <div style={{ height: '100%', width: '100%', position: 'relative' }}>
      <MapContainer 
        center={center} 
        zoom={zoom} 
        style={{ height: '100%', width: '100%' }}
        zoomControl={false}
        minZoom={10}
        maxZoom={18}
      >
        <MapContent vehicles={vehicles} />
      </MapContainer>
      
      <div className="absolute bottom-4 right-4 bg-white p-2 rounded-lg shadow-md text-xs text-gray-600">
        {vehicles.length} vehicles
      </div>
    </div>
  );
};

export default MapView;
